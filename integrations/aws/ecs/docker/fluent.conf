<source>
  @type tail
  path /var/lib/docker/containers/*/*-json.log
  pos_file /var/lib/docker/docker.log.pos
  tag raw.containers.*
  read_from_head true
  <parse>
    @type json
  </parse>
</source>

<filter raw.containers.**>
  @type docker_metadata
</filter>

<filter raw.containers.**>
  @type record_transformer
  enable_ruby
  <record>
    container_id ${record.dig("docker", "id")}
  </record>
</filter>

<match raw.containers.**>
  @type detect_exceptions
  remove_tag_prefix raw
  message log
  stream container_id
  multiline_flush_interval 5
  max_bytes 500000
  max_lines 1000
</match>

<filter containers.**>
  @type concat
  key message
  multiline_end_regexp /\n$/
  separator ""
  stream_identity_key container_id
</filter>

<filter containers.**>
  @type record_transformer
  remove_keys container_id
</filter>

<filter containers.**>
  @type parser
  key_name log
  reserve_time true
  reserve_data true
  remove_key_name_field true
  replace_invalid_sequence true
  emit_invalid_record_to_error false
  <parse>
    @type json
  </parse>
</filter>

<filter containers.**>
  @type record_transformer
  enable_ruby
  <record>
    app_name ${ENV["APP_NAME"] || record.dig("docker", "labels", "com.amazonaws.ecs.cluster")}
    sub_name ${ENV["SUB_SYSTEM"] || record.dig("docker", "labels", "com.amazonaws.ecs.container-name")}
  </record>
</filter>

<match containers.**>
  @type coralogix
  privatekey "#{ENV['PRIVATE_KEY']}"
  appname "$app_name"
  subsystemname "$sub_name"
  log_key_name log
  timestamp_key_name time
  is_json true
</match>
